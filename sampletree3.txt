Making huffman tree!
Original list of individual Huffman trees (str):
HuffmanTree('c',6,None,None,None)
HuffmanTree('b',3,None,None,None)
HuffmanTree('a',2,None,None,None)

Merging trees to make a complete Huffman Tree:
Merging tree HuffmanTree('a',2,None,None,None) and HuffmanTree('b',3,None,None,None) to make HuffmanTree('ab',5,HuffmanTree('a',2,None,None,False),HuffmanTree('b',3,None,None,True),None)
Merging tree HuffmanTree('ab',5,HuffmanTree('a',2,None,None,False),HuffmanTree('b',3,None,None,True),None) and HuffmanTree('c',6,None,None,None) to make HuffmanTree('abc',11,HuffmanTree('ab',5,HuffmanTree('a',2,None,None,False),HuffmanTree('b',3,None,None,True),False),HuffmanTree('c',6,None,None,True),None)
Merging done!
Final tree
HuffmanTree('abc',11,HuffmanTree('ab',5,HuffmanTree('a',2,None,None,False),HuffmanTree('b',3,None,None,True),False),HuffmanTree('c',6,None,None,True),None)

Created huffman tree:
      -1-> ('c',6)
 -->
           -1-> ('b',3)
      -0->
           -0-> ('a',2)

Original text was 11 characters in length which, with 1 byte per character, would be 11 ASCII bytes!
The encoding table is:
'a':00
'b':01
'c':1
New text is 16 bits in length, which is 2 bytes! (Plus we'd also have to store the decoding table as well.)
That is 18.18% of the size
Program completed successfully!
